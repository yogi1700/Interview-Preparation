Ques 1 : OOP is a programming paradigm based on the concept of "objects," which are instances of classes. OOP principles aim to mimic real-world entities and relationships. The four main concepts of OOP are:

Encapsulation: Wrapping data (attributes) and methods (functions) that operate on the data within a single unit or class.
Abstraction: Hiding complex implementation details and exposing only necessary parts.
Inheritance: Creating a new class based on an existing class, inheriting its properties and behavior.
Polymorphism: The ability for functions or methods to behave differently based on input or the type of the object calling them.

Example:

#include <iostream>
using namespace std;

class Shape {  // Base class
public:
    virtual void draw() = 0;  // Pure virtual function for polymorphism
};

class Circle : public Shape {  // Derived class inheriting Shape
public:
    void draw() override {  // Polymorphism: Circle defines how to draw itself
        cout << "Drawing Circle" << endl;
    }
};

int main() {
    Shape* shape = new Circle();  // Abstracted shape
    shape->draw();  // Polymorphism: runtime binding to Circle's draw()
    delete shape;
}


Ques 2: Explain Encapsulation with an Example.

Encapsulation is the concept of bundling data and methods that operate on the data within a single unit, such as a class. It hides the internal states of an object from the outside.

Example:

#include <iostream>
using namespace std;

class BankAccount {
private:
    double balance;  // Encapsulated data

public:
    BankAccount(double initialBalance) : balance(initialBalance) {}

    void deposit(double amount) {
        if (amount > 0) balance += amount;
    }

    double getBalance() const { return balance; }
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500);
    cout << "Balance: " << account.getBalance() << endl;
}

